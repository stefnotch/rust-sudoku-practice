#[rustfmt::skip]
pub fn get_all() -> Vec<Vec<(usize, usize)>> {
  let cell_constraints:Vec<Vec<(usize, usize)>> = vec![
    vec![(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)],
    vec![(3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2), (5, 0), (5, 1), (5, 2)],
    vec![(6, 0), (6, 1), (6, 2), (7, 0), (7, 1), (7, 2), (8, 0), (8, 1), (8, 2)],
    vec![(0, 3), (0, 4), (0, 5), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5)],
    vec![(3, 3), (3, 4), (3, 5), (4, 3), (4, 4), (4, 5), (5, 3), (5, 4), (5, 5)],
    vec![(6, 3), (6, 4), (6, 5), (7, 3), (7, 4), (7, 5), (8, 3), (8, 4), (8, 5)],
    vec![(0, 6), (0, 7), (0, 8), (1, 6), (1, 7), (1, 8), (2, 6), (2, 7), (2, 8)],
    vec![(3, 6), (3, 7), (3, 8), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8)],
    vec![(6, 6), (6, 7), (6, 8), (7, 6), (7, 7), (7, 8), (8, 6), (8, 7), (8, 8)]
  ];

  let mut row_col_constraints:Vec<Vec<(usize, usize)>> = Vec::new();
  for i in 0..9 {
      let mut row = Vec::new();
      let mut col = Vec::new();
      for j in 0..9 {
        row.push((i,j));
        col.push((j,i));
      }
      row_col_constraints.push(row);
      row_col_constraints.push(col);
  }

  let special_constraints:Vec<Vec<(usize, usize)>> = vec![
    vec![(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 2), (1, 3), (2, 0)],
    vec![(0, 4), (0, 5), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 5)],
    vec![(0, 6), (0, 7), (0, 8), (1, 6), (2, 6), (2, 7), (2, 8), (3, 6)],
    vec![(3, 8), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (6, 5), (6, 6), (6, 7)],
    vec![(6, 8), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (8, 6), (8, 7), (8, 8)],
    vec![(3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (4, 0), (4, 4), (5, 0), (5, 1)],
    vec![(4, 1), (4, 2), (4, 3), (5, 3), (5, 4), (6, 4)],
    vec![(5, 2), (6, 0), (6, 1), (6, 2), (6, 3), (7, 0), (8, 0), (8, 1)],
    vec![(7, 1), (7, 2), (8, 2), (8, 3), (8, 4), (8, 5)]
  ];

  return [cell_constraints, row_col_constraints, special_constraints].concat()
}
